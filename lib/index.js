// Generated by CoffeeScript 1.10.0
var EventEmitter, T411, clientT411, connected, event, fs, parse, path, sorts_params, t411, util;

path = require('path');

T411 = require('t411');

EventEmitter = require('events');

parse = require('parse-torrent');

fs = require('fs');

util = require('util');

event = new EventEmitter;

clientT411 = new T411;

sorts_params = {
  x265: 6,
  x264: 1,
  1080: 3,
  720: 2,
  "null": 0.5
};

path = "%USERPROFILE%\\Downloads\\";

connected = 0;

t411 = (function() {
  function t411(params) {
    var self;
    if (params['path']) {
      path = params['path'];
    }
    if (params['sorts_params']) {
      sorts_params = params['sorts_params'];
    }
    this.connected;
    self = this;
    clientT411.auth(params['user'], params['password'], function(err) {
      if (err) {
        throw err;
      }
      connected = 1;
      self['client'] = clientT411;
      self['connected'] = 1;
      return self.emit("connected");
    });
  }

  t411.prototype.find = function(query, options, callback) {
    var cat;
    if (typeof options === "function") {
      callback = options;
      options = {};
      cat = 631;
    } else {
      if (!options[0]) {
        cat = 631;
      } else {
        cat = 433;
      }
    }
    return clientT411.search(query, {
      limit: 10000,
      cid: cat
    }, function(err, res) {
      var error, i, j, len, len1, obj, query_split, ref, score, torrent, updateTorrents;
      if (err) {
        throw err;
      }
      error = "";
      updateTorrents = [];
      query_split = query.toLowerCase().split(" ");
      query = "";
      for (i = 0, len = query_split.length; i < len; i++) {
        obj = query_split[i];
        query += "-" + obj;
      }
      query = query.substring(1);
      ref = res.torrents;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        torrent = ref[j];
        if (typeof torrent === 'object') {
          score = torrent['seeders'];
          if (torrent['rewritename'].indexOf('hevc') >= 0 || torrent['rewritename'].indexOf('x265') >= 0 || torrent['rewritename'].indexOf('h265') >= 0) {
            score = score * sorts_params['x265'];
          } else if (torrent['rewritename'].indexOf('x264') >= 0 || torrent['rewritename'].indexOf('h264') >= 0) {
            score = score * sorts_params['x264'];
          } else {
            score = score * sorts_params['null'];
          }
          if (torrent['rewritename'].indexOf('1080') >= 0) {
            score = score * sorts_params['1080'];
          } else if (torrent['rewritename'].indexOf('720') >= 0) {
            score = score * sorts_params['720'];
          } else {
            score = score * sorts_params['null'];
          }
          torrent['score'] = score;
          if (torrent['rewritename'].indexOf(query) >= 0 && (torrent['rewritename'].indexOf('vostfr') >= 0 || torrent['rewritename'].indexOf('multi') >= 0)) {
            if (options.length > 0) {
              if (torrent['rewritename'].indexOf(options.toLowerCase()) >= 0) {
                updateTorrents.push(torrent);
              }
            } else {
              updateTorrents.push(torrent);
            }
          }
        }
      }
      updateTorrents.sort(function(a, b) {
        if (a.score < b.score) {
          return 1;
        }
        if (a.score > b.score) {
          return -1;
        }
        return 0;
      });
      if (updateTorrents.length <= 0) {
        error = "No torrent found";
      }
      return callback(error, updateTorrents);
    });
  };

  t411.prototype.download = function(query, options, callback) {
    var self;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    self = this;
    return self.find(query, options, function(err, res) {
      if (err) {
        callback(err, res);
      } else {

      }
      return self.get(res[0]["id"], function(err, res) {
        return callback(err, res);
      });
    });
  };

  t411.prototype.get = function(id, callback) {
    return clientT411.download(id, function(err, buf) {
      var name, parsed;
      if (err) {
        throw err;
      }
      parsed = parse(buf);
      name = parsed['name'] + ".torrent";
      return fs.writeFile(path + name, buf, function(err) {
        return callback(name + " is download to " + path);
      });
    });
  };

  return t411;

})();

util.inherits(t411, EventEmitter);

module.exports = t411;
