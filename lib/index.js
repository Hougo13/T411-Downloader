// Generated by CoffeeScript 1.10.0
var EventEmitter, T411, clientT411, connect, connected, download, event, filter, fs, main, parse, path, search, sort, sorts_params, t411;

path = require('path');

T411 = require('t411');

EventEmitter = require('events');

parse = require('parse-torrent');

fs = require('fs');

event = new EventEmitter;

clientT411 = new T411;

sorts_params = {
  x265: 4,
  x264: 1,
  1080: 3,
  720: 2,
  "null": 0.5
};

connected = 0;

path = "";

t411 = (function() {
  function t411(params) {
    this.user = params['user'];
    this.password = params['password'];
    path = params['path'];
    connect(this.user, this.password);
  }

  t411.prototype.download = function(query, options, callback) {
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    if (connected === 1) {
      return main(query, options, callback);
    } else {
      return event.on("connected", function() {
        return main(query, options, callback);
      });
    }
  };

  return t411;

})();

connect = function(user, password) {
  return clientT411.auth(user, password, function() {
    connected = 1;
    return event.emit("connected");
  });
};

main = function(query, options, callback) {
  return search(query, options, function(res) {
    if (res.total > 0) {
      return filter(res.torrents, query, options, function(res) {
        if (res[0]) {
          return sort(res, function(res) {
            return download(res[0]['id'], function(res) {
              return callback(res);
            });
          });
        } else {
          return callback('no result');
        }
      });
    } else {
      return callback('No result');
    }
  });
};

search = function(query, cat, callback) {
  if (cat.length > 0) {
    cat = 433;
  } else {
    cat = 631;
  }
  return clientT411.search(query, {
    limit: 10000,
    cid: cat
  }, function(err, res) {
    return callback(res);
  });
};

filter = function(torrents, query, options, callback) {
  var i, j, len, len1, obj, query_split, torrent, updateTorrents;
  updateTorrents = [];
  query_split = query.toLowerCase().split(" ");
  query = "";
  for (i = 0, len = query_split.length; i < len; i++) {
    obj = query_split[i];
    query += "-" + obj;
  }
  query = query.substring(1);
  for (j = 0, len1 = torrents.length; j < len1; j++) {
    torrent = torrents[j];
    if (torrent['rewritename'].indexOf('hevc') >= 0 || torrent['rewritename'].indexOf('x265') >= 0 || torrent['rewritename'].indexOf('h265') >= 0) {
      torrent['encode'] = 'x265';
    } else if (torrent['rewritename'].indexOf('x264') >= 0 || torrent['rewritename'].indexOf('h264') >= 0) {
      torrent['encode'] = 'x264';
    } else {
      torrent['encode'] = null;
    }
    if (torrent['rewritename'].indexOf('1080') >= 0) {
      torrent['quality'] = '1080';
    } else if (torrent['rewritename'].indexOf('720') >= 0) {
      torrent['quality'] = '720';
    } else {
      torrent['quality'] = null;
    }
    if (torrent['rewritename'].indexOf(query) >= 0 && (torrent['rewritename'].indexOf('vostfr') >= 0 || torrent['rewritename'].indexOf('multi') >= 0)) {
      if (options.length > 0) {
        if (torrent['rewritename'].indexOf(options.toLowerCase()) >= 0) {
          updateTorrents.push(torrent);
        }
      } else {
        updateTorrents.push(torrent);
      }
    }
  }
  return callback(updateTorrents);
};

sort = function(torrents, callback) {
  var i, len, score, torrent;
  for (i = 0, len = torrents.length; i < len; i++) {
    torrent = torrents[i];
    score = sorts_params[torrent['quality']] * sorts_params[torrent['encode']] * torrent['seeders'];
    torrent['score'] = score;
  }
  torrents.sort(function(a, b) {
    if (a.score < b.score) {
      return 1;
    }
    if (a.score > b.score) {
      return -1;
    }
    return 0;
  });
  return callback(torrents);
};

download = function(id, callback) {
  return clientT411.download(id, function(err, buf) {
    var name, parsed;
    parsed = parse(buf);
    name = parsed['name'] + ".torrent";
    fs.writeFile(path + name, buf, function(err) {
      return callback(name + " is download to " + path);
    });
    return callback(name + " is download to " + path);
  });
};

module.exports = t411;
